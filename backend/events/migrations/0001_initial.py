# Generated by Django 5.2.6 on 2025-09-16 16:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),  # type: ignore
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),  # type: ignore
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),  # type: ignore
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text="User's email address. Must be unique and is required for login.", max_length=254, unique=True)),
                ('first_name', models.CharField(help_text="User's first name. Required for personalization.", max_length=150, validators=[django.core.validators.MinLengthValidator(1)])),
                ('last_name', models.CharField(help_text="User's last name. Required for personalization.", max_length=150, validators=[django.core.validators.MinLengthValidator(1)])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Event title. Must be between 3-200 characters.', max_length=200, validators=[django.core.validators.MinLengthValidator(3)])),
                ('date_time', models.DateTimeField(help_text='Date and time when the event will occur. Required field.')),
                ('location', models.TextField(help_text='Event location or address. Free text format for flexibility.', validators=[django.core.validators.MinLengthValidator(5)])),
                ('description', models.TextField(blank=True, help_text='Optional detailed description of the event.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the event was created. Set automatically.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the event was last modified. Updated automatically.')),
                ('user', models.ForeignKey(help_text='The user who created this event.', on_delete=django.db.models.deletion.CASCADE, related_name='events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['date_time'],
                'indexes': [models.Index(fields=['user'], name='events_even_user_id_e71281_idx'), models.Index(fields=['date_time'], name='events_even_date_ti_685e41_idx'), models.Index(fields=['user', 'date_time'], name='events_even_user_id_bbbef0_idx')],
            },
        ),
    ]
